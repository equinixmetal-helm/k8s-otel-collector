---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-collector
  labels:
    k8s-app: opentelemetry-collector
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      k8s-app: opentelemetry-collector
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/opentelemetry-collector-config.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/external-secret-honeycomb.yaml") . | sha256sum }}
      labels:
        k8s-app: opentelemetry-collector
    spec:
      terminationGracePeriodSeconds: 60
      volumes:
        - name: opentelemetry-collector-config
          configMap:
            name: opentelemetry-collector
            items:
              - key: opentelemetry-collector-config
                path: opentelemetry-collector-config.yaml
      containers:
        - name: opentelemetry-collector
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command:
            - "/otelcol-contrib"
            - "--config=/conf/opentelemetry-collector-config.yaml"
          env:
            - name: HONEYCOMB_TEAM
              valueFrom:
                secretKeyRef:
                  name: honeycomb-secret
                  key: honeycomb-api-key
            - name: HONEYCOMB_DATASET
              value: {{ .Values.honeycomb.dataset }}
            # second key for new honeycomb environments, to allow double-sending
            - name: HONEYCOMB_ENV_API_KEY
              valueFrom:
                secretKeyRef:
                  name: honeycomb-env-key
                  key: honeycomb-env-key
          # These values don't change:
          ports:
            - name: otlp-http
              containerPort: 55681
              protocol: TCP
            - name: otlp-grpc
              containerPort: 4317
              protocol: TCP
          volumeMounts:
            - name: opentelemetry-collector-config
              mountPath: /conf
          livenessProbe:
            httpGet:
              path: /
              port: 13133
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 13133
            initialDelaySeconds: 10
{{ if not (has "single-node-cluster" .Values.clusterInfo.tags) }}
          # You may want to configure resources depending on hardware:
          resources:
            limits:
              cpu: {{ .Values.resources.cpu | default "1" }}
              memory: {{ .Values.resources.memory | default "2Gi" }}
            requests:
              cpu: {{ .Values.resources.cpu | default "1" }}
              memory: {{ .Values.resources.memory | default "2Gi" }}
{{- end }}
