apiVersion: v1
kind: ConfigMap
metadata:
  name: opentelemetry-collector
data:
  opentelemetry-collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:55681
      prometheus:
        config:
          scrape_configs:
            - job_name: {{ .Release.Namespace }}-collector
              scrape_interval: 15s
              static_configs:
                - targets: ["127.0.0.1:8888"]
      # Dummy receiver that's never used, because a pipeline is required to have one.
      otlp/spanmetrics:
        protocols:
          grpc:
            endpoint: "localhost:12345"

    processors:
      batch:
        timeout: 200ms
      memory_limiter:
        limit_mib: {{ .Values.memory_limiter.limit_mib }}
        spike_limit_mib: {{ .Values.memory_limiter.spike_limit_mib }}
        check_interval: {{ .Values.memory_limiter.check_interval }}
      resource:
        attributes:
        - key: service.group
          value: "equinix-metal"
          action: insert
      spanmetrics:
        metrics_exporter: prometheus

    exporters:
      otlp:
        endpoint: "api.honeycomb.io:443"
        headers:
          "x-honeycomb-team": "${HONEYCOMB_ENV_API_KEY}"
      otlp/metrics:
        endpoint: "api.honeycomb.io:443"
        headers:
          "x-honeycomb-team": "${HONEYCOMB_ENV_API_KEY}"
          # dataset is required for metrics data
          "x-honeycomb-dataset": "collector-metrics"
      prometheus:
        endpoint: 0.0.0.0:8889

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      zpages:
      memory_ballast:
        size_mib: 683
    service:
      extensions: [memory_ballast, health_check, zpages]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch, spanmetrics]
          exporters: [otlp]
        metrics:
          receivers: [prometheus]
          processors: [resource]
          exporters: [otlp/metrics,prometheus]
        metrics/spanmetrics:
          receivers: [otlp/spanmetrics]
          exporters: [prometheus]
