apiVersion: v1
kind: ConfigMap
metadata:
  name: opentelemetry-collector
data:
  opentelemetry-collector-config: |

    receivers:
      otlp:  # can receive all data formats
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:55681
      prometheus/collector-metrics:
        config:
          scrape_configs:
            - job_name: {{ .Release.Namespace }}-collector  # becomes service.name in collector-metrics dataset
              scrape_interval: 15s
              static_configs:
                - targets: ["127.0.0.1:8888"]

    processors:
      batch:
        timeout: 200ms
      memory_limiter:
        limit_mib:       {{ .Values.memory_limiter.limit_mib }}
        spike_limit_mib: {{ .Values.memory_limiter.spike_limit_mib }}
        check_interval:  {{ .Values.memory_limiter.check_interval }}
      resource:
        attributes:
        {{- if .Values.include_otel_attributes }}
        {{- include "otel_attributes" . | indent 8 }}
        {{- end }}
        - key: service.group
          value: "equinix-metal"
          action: insert

    exporters:
      otlp/traces-honeycomb:
        endpoint: "api.honeycomb.io:443"
        headers:
          "x-honeycomb-team": "${HONEYCOMB_ENV_API_KEY}"
      otlp/collector-metrics-honeycomb:
        endpoint: "api.honeycomb.io:443"
        headers:
          "x-honeycomb-team": "${HONEYCOMB_ENV_API_KEY}"
          # dataset is required for metrics data
          "x-honeycomb-dataset": "collector-metrics"
      {{- if .Values.addl_traces_exporter.enabled }}
      {{ .Values.addl_traces_exporter.name }}:
        endpoint: {{ .Values.addl_traces_exporter.endpoint }}
        tls:
          {{ .Values.addl_traces_exporter.tls }}
      {{- end }}
    {{- if .Values.splunk_hec.enabled }}
    splunk_hec:
      logs:
        token: "${SPLUNK_HEC_LOGS_TOKEN}"
        endpoint: "{{ .Values.splunk_hec.logs.endpoint }}"
        source: "{{ .Values.splunk_hec.logs.source }}"
        sourcetype: "{{ .Values.splunk_hec.logs.sourcetype }}"
        log_data_enabled: {{ .Values.splunk_hec.logs.log_data_enabled }}
        index: "{{ .Values.splunk_hec.logs.index }}"
        tls:
          insecure_skip_verify: {{ .Values.splunk_hec.logs.tls.insecure_skip_verify }}
    {{- end }}

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      zpages:
      {{- if .Values.memory_ballast.enabled }}
      memory_ballast:
        size_mib: {{ .Values.memory_ballast.size_mib }}
      {{- end }}

    service:
    {{- if .Values.memory_ballast.enabled }}
      extensions: [memory_ballast, health_check, zpages]
      {{- else }}
      extensions: [health_check, zpages]
      {{- end }}
      pipelines:
        traces:
          receivers:  [otlp]
          processors: [memory_limiter, resource, batch]
          {{- if .Values.addl_traces_exporter.enabled }}
          exporters:  [otlp/traces-honeycomb, {{ .Values.addl_traces_exporter.name }}]
          {{- else }}
          exporters:  [otlp/traces-honeycomb]
          {{- end }}
        metrics/collector-metrics:
          receivers:  [prometheus/collector-metrics]
          processors: [memory_limiter, resource, batch]
          exporters:  [otlp/collector-metrics-honeycomb]
        {{- if .Values.splunk_hec.enabled }}
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [splunk_hec/logs]
        {{- end }}
